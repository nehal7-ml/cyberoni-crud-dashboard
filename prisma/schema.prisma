datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL_MAIN")
  shadowDatabaseUrl = env("DATABASE_URL_SHADOW")
  relationMode      = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  password          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique
  userId       String
  expires      DateTime
  user         User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  guruAgent    GuruAgent? @relation(fields: [guruAgentId], references: [id])
  guruAgentId  String?

  @@index([userId])
  @@index([guruAgentId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String          @id @default(cuid())
  firstName      String?
  lastName       String?
  email          String          @unique
  emailVerified  DateTime?
  password       String          @default("")
  image          Image?          @relation(fields: [imageId], references: [id])
  addressId      String?
  role           Role            @default(USER)
  address        Address?        @relation(fields: [addressId], references: [id])
  accounts       Account[]
  blogs          Blog[]
  reviews        Review[]
  imageId        String?
  CartItem       CartItem[]
  ApiCredentials ApiCredential[]
  BlogLike       BlogLike[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  Session        Session[]
  Payment        Payment[]
  BlogComment    BlogComment[]

  @@index([addressId])
  @@index([imageId])
}

model Address {
  id            String       @id @default(cuid())
  coordinates   Coordinates? @relation(fields: [coordinatesId], references: [id])
  street        String
  city          String
  state         String
  zipCode       String
  country       String
  User          User[]
  Property      Property[]
  coordinatesId String?
  GuruUser      GuruAgent[]

  @@index([coordinatesId])
}

model Coordinates {
  id        String    @id @default(cuid())
  latitude  Decimal   @db.Decimal(8, 6)
  longitude Decimal   @db.Decimal(9, 6)
  Address   Address[]
}

model CartItem {
  id        String  @id @default(uuid())
  quantity  Int
  productId String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@index([productId])
  @@index([userId])
}

model ApiCredential {
  id                 String   @id @default(uuid())
  token              String   @db.Text
  tokenExpiry        DateTime
  refreshToken       String   @db.Text
  refreshTokenExpiry DateTime
  user               User     @relation(fields: [userId], references: [id])
  userId             String

  @@index([userId])
}

model Product {
  id                   String        @id @default(uuid())
  sku                  String
  name                 String
  status               ProductStatus @default(SOLDOUT)
  ratings              Int?
  inventory            Int
  productBreakdown     String?
  shippingReturnPolicy String        @db.Text
  description          String        @db.Text
  tags                 Tag[]
  price                Int
  profitMargin         Int
  displayPrice         Int
  category             String
  subcategory          String?
  images               Image[]
  cart                 CartItem[]
  suppliers            Supplier[]
  reviews              Review[]
  amazonProductId      String?
  cjDropShippingId     String?

  @@index([amazonProductId])
  @@index([cjDropShippingId])
}

model AmazonProduct {
  id String @id @default(uuid())
}

model CjShipping {
  id String @id @default(uuid())
}

model Order {
  id String @id @default(uuid())
}

model Blog {
  id             String        @id @default(uuid())
  title          String
  subTitle       String
  description    String        @db.Text
  featured       Boolean       @default(false)
  images         Image[]
  author         User          @relation(fields: [userId], references: [id])
  date           DateTime
  content        String        @db.LongText
  tags           Tag[]
  template       BlogTemplate? @relation(fields: [blogTemplateId], references: [id])
  userId         String
  Likes          BlogLike[]
  Views          Int           @default(0)
  Comments       BlogComment[]
  blogTemplateId String?

  @@index([userId])
  @@index([blogTemplateId])
}

model BlogTemplate {
  id       String @id @default(uuid())
  name     String
  template String @db.Text
  Blog     Blog[]
}

model BlogComment {
  id        String   @id @default(uuid())
  comment   String   @db.Text
  Blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([blogId])
  @@index([userId])
}

model BlogLike {
  user   User   @relation(fields: [userId], references: [id])
  blog   Blog   @relation(fields: [blogId], references: [id])
  userId String
  blogId String

  @@id([userId, blogId])
  @@index([userId])
  @@index([blogId])
}

model Supplier {
  id                      String    @id @default(uuid())
  baseShippingPrice       Int
  height                  Int
  width                   Int
  length                  Int
  weight                  Int
  supplierName            String
  supplierStatus          String?
  shippingWeight          Int?
  listPrice               Int?
  salePrice               Int?
  availability            String?
  supplierWrittenComments String?
  supplierUrl             String    @db.Text
  supplierEmail           String?
  supplierWhatsApp        String?
  products                Product[]
}

model Service {
  id                 String               @id @default(uuid())
  image              Image?               @relation(fields: [imageId], references: [id], onDelete: Cascade)
  title              String
  previewContent     String               @db.Text
  hourlyRate         Int
  valueBrought       Json
  skillsUsed         Json
  htmlEmbed          String?
  featured           Boolean              @default(false)
  reviews            Review[]
  tags               Tag[]
  imageId            String?
  SubServices        SubService[]
  ServiceDescription ServiceDescription[]
  CaseStudies        CaseStudy[]
  faqs               FAQ[]

  @@index([imageId])
}

model ServiceDescription {
  id          String  @id @default(uuid())
  title       String
  content     String  @db.LongText
  imageOnLeft Boolean @default(true)
  image       Image?  @relation(fields: [imageId], references: [id], onDelete: SetNull)
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  imageId     String?
  serviceId   String

  @@index([serviceId])
  @@index([imageId])
}

model Payment {
  id             String   @id @default(uuid())
  subscriptionId String
  invoice        String   @db.Text
  price          String
  customer       User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  userId         String

  @@index([userId])
}

model Review {
  id               String     @id @default(uuid())
  name             String
  image            Image?     @relation(fields: [imageId], references: [id])
  title            String
  content          String     @db.Text
  link             String     @db.Text
  rating           Int
  tags             Tag[]
  verifiedCustomer Boolean    @default(false)
  reviewType       ReviewType @default(MAIN)
  product          Product?   @relation(fields: [productId], references: [id])
  productId        String?
  service          Service?   @relation(fields: [serviceId], references: [id])
  serviceId        String?
  prompt           GptPrompt? @relation(fields: [gptPromptId], references: [id])
  user             User       @relation(fields: [userId], references: [id])
  userId           String
  imageId          String?
  gptPromptId      String?

  @@index([productId])
  @@index([serviceId])
  @@index([userId])
  @@index([imageId])
  @@index([gptPromptId])
}

model Image {
  id                 String               @id @default(uuid())
  name               String?
  src                String               @db.Text
  products           Product[]
  blogs              Blog[]
  Service            Service[]
  SubService         SubService[]
  Review             Review[]
  GptPrompt          GptPrompt[]
  User               User[]
  Event              Event[]
  ServiceDescription ServiceDescription[]
}

model SubService {
  id                                        String       @id @default(uuid())
  image                                     Image?       @relation(fields: [imageId], references: [id])
  title                                     String
  pricingModel                              PricingModel @default(DEFAULT)
  discounts                                 Json?
  serviceDeliverables                       Json?
  tags                                      Tag[]
  serviceUsageScore                         Int
  description                               String       @db.Text
  department                                String
  estimated_hours_times_fifty_percent       Int
  estimated_hours_times_one_hundred_percent Int
  skillLevel                                String
  complexity                                Int
  overheadCost                              Int
  service                                   Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  imageId                                   String?
  serviceId                                 String

  @@index([imageId])
  @@index([serviceId])
}

model FAQ {
  id        String   @id @default(uuid())
  question  String   @db.Text
  answer    String   @db.Text
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?

  @@index([serviceId])
}

model CaseStudy {
  id                  String   @id @default(uuid())
  title               String
  type                Service? @relation(fields: [serviceId], references: [id])
  preview             String   @db.Text
  problemStatement    String   @db.Text
  userResearch        String   @db.Text
  userProblems        Json
  possibleSolutions   Json
  goals               Json
  images              Json //image 
  uniqueFeatures      String   @db.Text
  keyLearning         String   @db.Text
  userPersonas        Json
  competetiveAnalysis Json
  wireFrames          Json?
  hifiDesign          Json?
  userFlow            Json?
  architecture        Json?
  serviceId           String?

  @@index([serviceId])
}

model GptPrompt {
  id                String     @id @default(uuid())
  description       String     @db.Text
  title             String     @default("")
  prompt            String?    @db.Text
  model             String?    @default("gpt-3.5-turbo")
  temperature       Int?       @default(0)
  max_tokens        Int?       @default(0)
  top_p             Int?       @default(0)
  best_of           Int?       @default(0)
  frequency_penalty Int?       @default(0)
  presence_penalty  Int?       @default(0)
  botUrl            String?    @db.Text
  completions       Int?       @default(1)
  stop              Json?
  timesUsed         Int?       @default(0)
  timesIntegrated   Int?       @default(0)
  costPerToken      Int?       @default(0)
  profitMargin      Int?       @default(0)
  tags              Tag[]
  image             Image?     @relation(fields: [imageId], references: [id])
  reviews           Review[]
  imageId           String?
  pricing           GptPricing @default(LOW)

  @@index([imageId])
}

model Event {
  id          String      @id @default(uuid())
  name        String
  date        DateTime
  location    String
  description String      @db.Text
  image       Image?      @relation(fields: [imageId], references: [id])
  imageId     String?
  eventLink   String      @db.Text // URL for Eventbrite or Facebook event page
  status      EventStatus
  isVirtual   Boolean
  tags        Tag[]

  @@index([imageId])
}

model Referral {
  id          String           @id @default(uuid())
  prefix      String?
  type        ReferralType     @default(REDIRECT)
  campaignId  String
  expires     DateTime
  description String           @db.Text
  priority    ReferralPriority @default(LOW)
  redirect    String
  link        String
  fallback    String
  click       Int
  utmProps    Json?

  @@unique([type, prefix], name: "referralId")
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  products    Product[]
  blog        Blog[]
  reviews     Review[]
  services    Service[]
  subServices SubService[]
  prompts     GptPrompt[]
  events      Event[]
}

model Property {
  id           String         @id @default(uuid())
  address      Address        @relation(fields: [addressId], references: [id])
  title        String         @db.Text
  type         PropertyType
  featured     Boolean        @default(false)
  bedroomCount Int
  bathCount    Float
  fee          String
  process      String         @db.Text
  link         String?        @db.Text
  deposit      String         @db.Text
  files        PropertyFile[]
  addressId    String
  mapUrl       String         @db.Text
  additional   String?        @db.Text
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt

  @@index([addressId])
  @@fulltext([title])
  @@fulltext([title, fee, deposit, additional, process])
}

enum PropertyType {
  TOWNHOUSE
  APARTMENT
}

model PropertyFile {
  id         String    @id @default(uuid())
  name       String
  src        String    @db.Text
  type       String
  Property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
  feeSheet   Boolean   @default(false)

  @@index([propertyId])
}

enum FileType {
  DOCX
  PDF
  XML
  JPG
  PNG
  GIF
}

model GuruAgent {
  id            String    @id @default(uuid())
  role          GuruRole  @default(AGENT)
  firstName     String
  lastName      String
  phone         String?
  email         String    @unique
  title         String
  notes         String?
  password      String
  address       Address?  @relation(fields: [addressId], references: [id])
  addressId     String
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  Session       Session[]

  @@index([addressId])
}

enum GuruRole {
  ADMIN
  AGENT
  SUPER
}

enum Role {
  ADMIN
  SUPERUSER
  TRUSTED
  USER
  CUSTOMER
}

enum LoginProvider {
  faceebook
  google
}

enum ReviewType {
  MAIN
  PRODUCT
  SERVICE
  PROMPT
}

enum EventStatus {
  UPCOMING
  CANCELLED
  COMPLETED
}

enum ProductStatus {
  AVAILABLE
  SOLDOUT
}

enum PricingModel {
  DEFAULT
  AGGRESSIVE
}

enum ReferralType {
  AFFILIATE
  REDIRECT
}

enum ReferralPriority {
  LOW
  MEDIUM
  HIGH
}

enum GptPricing {
  LOW
  MODERATE
  AGGRESSIVE
}
